
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 04 14:19:23 CST 2018
//----------------------------------------------------

package Gramatica_DASM;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.lang.*;
import javax.swing.JOptionPane;
import java.io.*;
import Estructuras_Ide.Nodo_Ejecutor;
import Estructuras_Ide.Errores;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 04 14:19:23 CST 2018
  */
public class sintactico_DASM extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintactico_DASM() {super();}

  /** Constructor which sets the default scanner. */
  public sintactico_DASM(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico_DASM(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\003\006\000\002\011\004\000\002\011\003" +
    "\000\002\011\003\000\002\004\005\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\005\000\002" +
    "\004\004\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\004\000\002\005\004\000\002\005\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\004\036\004\001\002\000\010\005\011\006" +
    "\014\007\013\001\002\000\006\002\000\036\010\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\010\005\011\006\014\007\013\001\002\000\004\006\102" +
    "\001\002\000\074\004\020\005\036\010\043\011\035\012" +
    "\033\013\025\014\034\015\052\016\026\017\040\020\017" +
    "\021\027\022\044\023\053\024\030\025\022\026\050\027" +
    "\037\030\024\031\023\032\054\033\041\034\032\035\015" +
    "\040\021\041\045\042\016\043\042\044\051\001\002\000" +
    "\074\004\ufffb\005\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\001\002\000\074\004\ufffc" +
    "\005\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\035\ufffc\040\ufffc\041\ufffc\042\ufffc" +
    "\043\ufffc\044\ufffc\001\002\000\006\004\uffe1\005\uffe1\001" +
    "\002\000\076\004\uffd0\005\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\037" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\001\002" +
    "\000\076\004\uffd6\005\uffd6\010\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\001\002\000" +
    "\076\004\ufff3\005\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3" +
    "\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\037\ufff3\040" +
    "\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\001\002\000\076" +
    "\004\uffcd\005\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\001\002\000\076\004" +
    "\uffd1\005\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\035\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\001\002\000\006\004\uffe4" +
    "\005\uffe4\001\002\000\006\004\uffe6\005\uffe6\001\002\000" +
    "\076\004\uffdb\005\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\001\002\000\076" +
    "\004\uffd8\005\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\037\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\044\uffd8\001\002\000\076\004" +
    "\uffd5\005\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\001\002\000\076\004\uffd2" +
    "\005\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\037\uffd2\040\uffd2\041\uffd2" +
    "\042\uffd2\043\uffd2\044\uffd2\001\002\000\006\004\065\005" +
    "\064\001\002\000\006\004\uffe2\005\uffe2\001\002\000\076" +
    "\004\uffdc\005\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\044\uffdc\001\002\000\076\004" +
    "\uffda\005\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\037\uffda\040\uffda\041" +
    "\uffda\042\uffda\043\uffda\044\uffda\001\002\000\076\004\uffdd" +
    "\005\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\044\uffdd\001\002\000\004\006\100\001" +
    "\002\000\006\004\uffdf\005\uffdf\001\002\000\076\004\uffd7" +
    "\005\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\037\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\001\002\000\006\004\uffe3\005" +
    "\uffe3\001\002\000\076\004\uffcf\005\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\001\002\000\076\004\ufff2\005\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2" +
    "\037\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\001" +
    "\002\000\076\004\uffd4\005\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\001\002" +
    "\000\006\004\uffe0\005\uffe0\001\002\000\076\004\055\005" +
    "\060\010\061\011\035\012\033\013\025\014\034\015\052" +
    "\016\026\017\040\020\017\021\027\022\044\023\053\024" +
    "\030\025\022\026\050\027\037\030\024\031\023\032\054" +
    "\033\041\034\032\035\015\037\056\040\021\041\045\042" +
    "\016\043\042\044\051\001\002\000\076\004\ufff4\005\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4" +
    "\043\ufff4\044\ufff4\001\002\000\006\004\uffde\005\uffde\001" +
    "\002\000\076\004\uffce\005\uffce\010\uffce\011\uffce\012\uffce" +
    "\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\037" +
    "\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\001\002" +
    "\000\076\004\uffd9\005\uffd9\010\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\001\002\000" +
    "\076\004\uffd3\005\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\001\002\000\006" +
    "\004\uffe5\005\uffe5\001\002\000\076\004\ufff8\005\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043" +
    "\ufff8\044\ufff8\001\002\000\006\002\uffff\036\uffff\001\002" +
    "\000\006\004\065\005\064\001\002\000\004\006\063\001" +
    "\002\000\076\004\ufff7\005\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\037" +
    "\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\001\002" +
    "\000\076\004\ufff9\005\ufff9\010\ufff9\011\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\037\ufff9" +
    "\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\001\002\000" +
    "\076\004\ufff6\005\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6" +
    "\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\037\ufff6\040" +
    "\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\001\002\000\022" +
    "\006\067\045\071\046\073\047\076\050\070\051\072\052" +
    "\075\053\077\001\002\000\076\004\uffef\005\uffef\010\uffef" +
    "\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef" +
    "\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034" +
    "\uffef\035\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\001\002\000\076\004\ufffa\005\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa" +
    "\035\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044" +
    "\ufffa\001\002\000\076\004\uffe7\005\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7" +
    "\001\002\000\076\004\uffeb\005\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\001" +
    "\002\000\076\004\uffee\005\uffee\010\uffee\011\uffee\012\uffee" +
    "\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021" +
    "\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\037" +
    "\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\001\002" +
    "\000\076\004\uffea\005\uffea\010\uffea\011\uffea\012\uffea\013" +
    "\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\037\uffea" +
    "\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\001\002\000" +
    "\076\004\uffed\005\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\037\uffed\040" +
    "\uffed\041\uffed\042\uffed\043\uffed\044\uffed\001\002\000\076" +
    "\004\ufff0\005\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\037\ufff0\040\ufff0" +
    "\041\ufff0\042\ufff0\043\ufff0\044\ufff0\001\002\000\076\004" +
    "\uffe9\005\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\044\uffe9\001\002\000\076\004\uffec" +
    "\005\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec" +
    "\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032" +
    "\uffec\033\uffec\034\uffec\035\uffec\037\uffec\040\uffec\041\uffec" +
    "\042\uffec\043\uffec\044\uffec\001\002\000\076\004\uffe8\005" +
    "\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\037\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\001\002\000\076\004\ufff1\005\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1" +
    "\043\ufff1\044\ufff1\001\002\000\076\004\ufff5\005\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\035\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\001\002\000\074\004\ufffd\005\ufffd\010\ufffd" +
    "\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\001\002\000\074\004\020\005\036\010\043\011\035\012" +
    "\033\013\025\014\034\015\052\016\026\017\040\020\017" +
    "\021\027\022\044\023\053\024\030\025\022\026\050\027" +
    "\037\030\024\031\023\032\054\033\041\034\032\035\015" +
    "\040\021\041\045\042\016\043\042\044\051\001\002\000" +
    "\076\004\055\005\060\010\061\011\035\012\033\013\025" +
    "\014\034\015\052\016\026\017\040\020\017\021\027\022" +
    "\044\023\053\024\030\025\022\026\050\027\037\030\024" +
    "\031\023\032\054\033\041\034\032\035\015\037\105\040" +
    "\021\041\045\042\016\043\042\044\051\001\002\000\006" +
    "\002\ufffe\036\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\006\002\005\003\004\001\001\000\004\011" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\011\001\001\000\002\001\001\000" +
    "\010\004\045\006\030\007\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\056\007\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\103" +
    "\006\030\007\046\001\001\000\006\006\056\007\061\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico_DASM$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico_DASM$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico_DASM$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Errores>lista_errores=new LinkedList<Errores>();
    public static Nodo_Ejecutor inicio=new Nodo_Ejecutor("INICIO","",0,0,0);
    public void syntax_error(Symbol s){
        System.out.println("Error en la linea "+(s.right+1)+" Columna "+s.left+". Identificador "+s.value+" no reconocido"); 
    }
    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        javax.swing.JOptionPane.showMessageDialog(null,"Error Sintactico en la linea "+(s.right+1)+"Columna "+s.left+". Identificador"+s.value+" no reconocido.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintactico_DASM$actions {

  
    public static int index=1;
    public Nodo_Ejecutor crear_Nodo(String nombre, String valor, int linea, int columna){
    Nodo_Ejecutor nuevo=new Nodo_Ejecutor(nombre,valor,linea,columna,index);
    index++;
    return nuevo;
    }

  private final sintactico_DASM parser;

  /** Constructor */
  CUP$sintactico_DASM$actions(sintactico_DASM parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintactico_DASM$do_action(
    int                        CUP$sintactico_DASM$act_num,
    java_cup.runtime.lr_parser CUP$sintactico_DASM$parser,
    java.util.Stack            CUP$sintactico_DASM$stack,
    int                        CUP$sintactico_DASM$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico_DASM$result;

      /* select the action based on the action number */
      switch (CUP$sintactico_DASM$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO_OPERACION2 ::= print 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("print",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION2",5, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPO_OPERACION2 ::= i_flotante 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("i_flotante",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION2",5, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO_OPERACION2 ::= i_entero 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("i_entero",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION2",5, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO_OPERACION2 ::= i_caracter 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("i_caracter",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION2",5, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO_OPERACION2 ::= not 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("not",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION2",5, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO_OPERACION2 ::= or 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("or",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION2",5, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO_OPERACION2 ::= and 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("and",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION2",5, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO_OPERACION2 ::= eqz 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("eqz",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION2",5, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO_OPERACION2 ::= gte 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("gte",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION2",5, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO_OPERACION2 ::= lte 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("lte",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION2",5, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO_OPERACION2 ::= gt 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("gt",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION2",5, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO_OPERACION2 ::= lt 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("lt",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION2",5, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO_OPERACION2 ::= mod 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("mod",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION2",5, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO_OPERACION2 ::= div 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("div",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION2",5, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO_OPERACION2 ::= mult 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("mult",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION2",5, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO_OPERACION2 ::= diff 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("diff",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION2",5, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO_OPERACION2 ::= add 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("add",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION2",5, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO_OPERACION ::= br 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("br",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION",4, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_OPERACION ::= br_if 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("br_if",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION",4, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO_OPERACION ::= call 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("call",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION",4, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO_OPERACION ::= tee_global 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("tee_global",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION",4, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO_OPERACION ::= tee_local 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("tee_local",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION",4, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO_OPERACION ::= set_global 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("set_global",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION",4, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPO_OPERACION ::= get_global 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("get_global",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION",4, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO_OPERACION ::= set_local 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("set_local",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION",4, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO_OPERACION ::= get_local 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("get_local",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION",4, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO ::= palabra 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("v_m",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO ::= line 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("line",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO ::= point 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("point",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO ::= texto 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("texto",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO ::= oval 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("oval",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO ::= quadrate 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("quadrate",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO ::= retorno 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("retorno",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO ::= calc 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("calc",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VALOR_OPERACION ::= numero_completo 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=crear_Nodo("numero",a,aright,aleft);
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("VALOR_OPERACION",3, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VALOR_OPERACION ::= dolar TIPO 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		Nodo_Ejecutor a = (Nodo_Ejecutor)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		RESULT=a;
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("VALOR_OPERACION",3, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO_FUNCTION ::= dolar palabra 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		
                                            Nodo_Ejecutor temp=crear_Nodo("operacion","operacion",0,0);
                                            Nodo_Ejecutor nodo=crear_Nodo("v_m",a,aright,aleft);
                                            temp.getHijos().add(nodo);
                                            RESULT=temp;                                            
                                        
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",2, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO_FUNCTION ::= numero_decimal 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		
                                            Nodo_Ejecutor temp=crear_Nodo("operacion","operacion",0,0);
                                            Nodo_Ejecutor nodo=crear_Nodo("decimal",a,aright,aleft);
                                            temp.getHijos().add(nodo);
                                            RESULT=temp;                                            
                                        
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",2, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO_FUNCTION ::= numero_completo 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		
                                            Nodo_Ejecutor temp=crear_Nodo("operacion","operacion",0,0);
                                            Nodo_Ejecutor nodo=crear_Nodo("numero",a,aright,aleft);
                                            temp.getHijos().add(nodo);
                                            RESULT=temp;                                            
                                        
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",2, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO_FUNCTION ::= TIPO_OPERACION2 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		Nodo_Ejecutor a = (Nodo_Ejecutor)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		
                                            Nodo_Ejecutor temp=crear_Nodo("operacion","operacion",0,0);
                                            temp.getHijos().add(a);
                                            RESULT=temp;
                                        
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",2, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDO_FUNCTION ::= TIPO_OPERACION VALOR_OPERACION 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).right;
		Nodo_Ejecutor a = (Nodo_Ejecutor)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		Nodo_Ejecutor b = (Nodo_Ejecutor)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		
                                                            Nodo_Ejecutor temp=crear_Nodo("operacion","operacion",0,0);
                                                            Nodo_Ejecutor tipo_operacion=crear_Nodo(a.getNombre(),a.getValor(),0,0);
                                                            tipo_operacion.getHijos().add(b);
                                                            temp.getHijos().add(tipo_operacion);
                                                            RESULT=temp;
                                                         
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",2, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENIDO_FUNCTION ::= CONTENIDO_FUNCTION dolar palabra 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-2)).right;
		Nodo_Ejecutor a = (Nodo_Ejecutor)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		
                                                                Nodo_Ejecutor temp=crear_Nodo("operacion","operacion",0,0);
                                                                Nodo_Ejecutor nodo=crear_Nodo("v_m",b,bright,bleft);
                                                                temp.getHijos().add(a);
                                                                temp.getHijos().add(nodo);
                                                                RESULT=temp;
                                                             
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",2, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTENIDO_FUNCTION ::= CONTENIDO_FUNCTION numero_decimal 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).right;
		Nodo_Ejecutor a = (Nodo_Ejecutor)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		
                                                                Nodo_Ejecutor temp=crear_Nodo("operacion","operacion",0,0);
                                                                Nodo_Ejecutor nodo=crear_Nodo("decimal",b,bright,bleft);
                                                                temp.getHijos().add(a);
                                                                temp.getHijos().add(nodo);
                                                                RESULT=temp;
                                                             
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",2, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDO_FUNCTION ::= CONTENIDO_FUNCTION numero_completo 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).right;
		Nodo_Ejecutor a = (Nodo_Ejecutor)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		
                                                                Nodo_Ejecutor temp=crear_Nodo("operacion","operacion",0,0);
                                                                Nodo_Ejecutor nodo=crear_Nodo("numero",b,bright,bleft);
                                                                temp.getHijos().add(a);
                                                                temp.getHijos().add(nodo);
                                                                RESULT=temp;
                                                             
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",2, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDO_FUNCTION ::= CONTENIDO_FUNCTION TIPO_OPERACION2 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).right;
		Nodo_Ejecutor a = (Nodo_Ejecutor)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		Nodo_Ejecutor b = (Nodo_Ejecutor)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		
                                                                Nodo_Ejecutor temp=crear_Nodo("operacion","operacion",0,0);
                                                                temp.getHijos().add(a);
                                                                temp.getHijos().add(b);
                                                                RESULT=temp;
                                                             
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",2, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDO_FUNCTION ::= CONTENIDO_FUNCTION TIPO_OPERACION VALOR_OPERACION 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-2)).right;
		Nodo_Ejecutor a = (Nodo_Ejecutor)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).right;
		Nodo_Ejecutor b = (Nodo_Ejecutor)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		Nodo_Ejecutor c = (Nodo_Ejecutor)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		
                                                                                Nodo_Ejecutor temp=crear_Nodo("operacion","operacion",0,0);
                                                                                temp.getHijos().add(a);
                                                                                Nodo_Ejecutor tipo_operacion=crear_Nodo(b.getNombre(),b.getValor(),0,0);
                                                                                tipo_operacion.getHijos().add(c);
                                                                                temp.getHijos().add(tipo_operacion);
                                                                                RESULT=temp;
                                                                             
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",2, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NOMBRE_FUNCTION ::= principal 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		
                                RESULT=crear_Nodo("principal",a,0,0);;
                              
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("NOMBRE_FUNCTION",7, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NOMBRE_FUNCTION ::= palabra 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		
                                RESULT=crear_Nodo(a,a,0,0);;
                            
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("NOMBRE_FUNCTION",7, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NOMBRE_FUNCTION ::= dolar palabra 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		
                                        RESULT=crear_Nodo(a+b,a+b,0,0);
                                    
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("NOMBRE_FUNCTION",7, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ASIGNACION ::= function NOMBRE_FUNCTION CONTENIDO_FUNCTION end 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-2)).right;
		Nodo_Ejecutor b = (Nodo_Ejecutor)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).right;
		Nodo_Ejecutor c = (Nodo_Ejecutor)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).value;
		
                                                                    Nodo_Ejecutor temp=crear_Nodo("asignacion","-",0,0);
                                                                    Nodo_Ejecutor funcion=crear_Nodo("funcion",b.getValor(),aright,aleft);
                                                                    funcion.getHijos().add(c);
                                                                    temp.getHijos().add(funcion);
                                                                    RESULT=temp;
                                                                 
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("ASIGNACION",1, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ASIGNACION ::= ASIGNACION function NOMBRE_FUNCTION CONTENIDO_FUNCTION end 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-4)).right;
		Nodo_Ejecutor a = (Nodo_Ejecutor)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-2)).right;
		Nodo_Ejecutor c = (Nodo_Ejecutor)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).right;
		Nodo_Ejecutor d = (Nodo_Ejecutor)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).value;
		
                                                                                
                                                                                Nodo_Ejecutor temp=crear_Nodo("asignacion","-",0,0);
                                                                                Nodo_Ejecutor funcion=crear_Nodo("funcion",c.getValor(),bright,bleft);
                                                                                funcion.getHijos().add(d);
                                                                                temp.getHijos().add(a);
                                                                                temp.getHijos().add(funcion);
                                                                                RESULT=temp;
                                                                               
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("ASIGNACION",1, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= ASIGNACION 
            {
              Nodo_Ejecutor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()).right;
		Nodo_Ejecutor a = (Nodo_Ejecutor)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.peek()).value;
		
                            Nodo_Ejecutor inicio=crear_Nodo("inicio","",0,0);
                            inicio.getHijos().add(a);
                            sintactico_DASM.inicio=inicio;
                        
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          return CUP$sintactico_DASM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).right;
		Nodo_Ejecutor start_val = (Nodo_Ejecutor)((java_cup.runtime.Symbol) CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)).value;
		RESULT = start_val;
              CUP$sintactico_DASM$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.elementAt(CUP$sintactico_DASM$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_DASM$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico_DASM$parser.done_parsing();
          return CUP$sintactico_DASM$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

